import DenseLayer from "./layers/dense.js";
import DropOut from "./layers/dropout.js";

import Mse from "./losses/mean_squired_error.js";
import Mae from "./losses/mean_absolute_error.js";
import Msae from "./losses/custom_mean_abosolute_error.js";
import CategoricalCrossEntropy from "./losses/categorical_cross_entropy.js";
import HybirdMaeMse from "./losses/MaeMsaHybrid.js";

import Mae_metrics from "./metrixs/metrix_mae.js";
import Metrics_Mse from "./metrixs/metrix_mse.js";
import Accuracy from "./metrixs/accuracy.js";

import Relu from "./activations/relu.js";
import Sigmoid from "./activations/sigmoid.js";
import Softmax from "./activations/softmax.js";

import Encoder from "./helpers/encorderDecoders.js";

import AdaGrad from "./optimizers/adaGrad.js";
import RMSProb from "./optimizers/RMSProp.js";
import SGD from "./optimizers/sgd.js";

export default class ModelTools{
    constructor(){

    }
    Layer_DenseLayer( nInputs , nNeurons  ){
        return  new DenseLayer(nInputs , nNeurons)
    }

    Layer_DropOut(){
        return new DropOut();
    }

    Loss_Mse(){
        return new Mse();
    }

    Loss_Mae(){
        return new Mae();
    }

    Loss_Msae(){
        return new Msae();
    }

    Loss_HybridMae({delta , useDefalut}={}){
        return new HybirdMaeMse({delta , useDefalut});
    }

    Loss_CategoricalCrossEntropy(){
        return new CategoricalCrossEntropy();
    }

    Optimizer_Sgd({learning_rate, decay, momentum}){
        return new SGD({learning_rate, decay, momentum});
    }

    Optimizer_AdaGrad({learning_rate=1, decay, momentum, elipson}={}){
        return new AdaGrad({learning_rate, decay, momentum, elipson});
    }

    Optimizer_RMSProb({learning_rate, decay, momentum, elipson, rho}){
        return new RMSProb({learning_rate, decay, momentum, elipson, rho});
    }

    Matrics_Mae(){
        return new Mae_metrics();
    }

    Matrics_Mse(){
        return new Metrics_Mse();
    }

    Matrics_Accuracy(showAnalytics = false){
        return new Accuracy({showAnalytics});
    }

    Encoder(){
        return new Encoder();
    }

    Activation_Relu(param){
        return new Relu(param)
    }

    Activation_Softmax(){
        return new Softmax();
    }

    Activation_Sigmoid(){
        return new Sigmoid();
    }


}
